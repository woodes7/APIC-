// <auto-generated />
using System;
using Contexto;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Contexto.Migrations
{
    [DbContext(typeof(ApiDBContexto))]
    [Migration("20231121095758_InitDB")]
    partial class InitDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AutorLibro", b =>
                {
                    b.Property<int>("AutoresIdAutor")
                        .HasColumnType("integer");

                    b.Property<int>("ListaLibrosIdLibro")
                        .HasColumnType("integer");

                    b.HasKey("AutoresIdAutor", "ListaLibrosIdLibro");

                    b.HasIndex("ListaLibrosIdLibro");

                    b.ToTable("AutorLibro");
                });

            modelBuilder.Entity("Modelo.Acceso", b =>
                {
                    b.Property<int>("IdAcceso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdAcceso"));

                    b.Property<string>("CodigoAcceso")
                        .HasColumnType("text");

                    b.Property<string>("DescripcionAcceso")
                        .HasColumnType("text");

                    b.HasKey("IdAcceso");

                    b.ToTable("Accesos", (string)null);
                });

            modelBuilder.Entity("Modelo.Autor", b =>
                {
                    b.Property<int>("IdAutor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdAutor"));

                    b.Property<string>("ApellidosAutor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NombreAutor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdAutor");

                    b.ToTable("Autores", (string)null);
                });

            modelBuilder.Entity("Modelo.Coleccion", b =>
                {
                    b.Property<int>("IdColeccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdColeccion"));

                    b.Property<string>("NombreColeccion")
                        .HasColumnType("text");

                    b.HasKey("IdColeccion");

                    b.ToTable("Colecciones", (string)null);
                });

            modelBuilder.Entity("Modelo.Editorial", b =>
                {
                    b.Property<int>("IdEditorial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdEditorial"));

                    b.Property<string>("NombreEditorial")
                        .HasColumnType("text");

                    b.HasKey("IdEditorial");

                    b.ToTable("Editoriales", (string)null);
                });

            modelBuilder.Entity("Modelo.EstadoPrestamo", b =>
                {
                    b.Property<int>("IdEstadoPrestamo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdEstadoPrestamo"));

                    b.Property<string>("CodigoEstadoPrestamo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DescripcionEstadoPrestamo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdEstadoPrestamo");

                    b.ToTable("EstadosPrestamos", (string)null);
                });

            modelBuilder.Entity("Modelo.Genero", b =>
                {
                    b.Property<int>("IdGenero")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdGenero"));

                    b.Property<string>("DescripcionGenero")
                        .HasColumnType("text");

                    b.Property<string>("NombreGenero")
                        .HasColumnType("text");

                    b.HasKey("IdGenero");

                    b.ToTable("Generos", (string)null);
                });

            modelBuilder.Entity("Modelo.Libro", b =>
                {
                    b.Property<int>("IdLibro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdLibro"));

                    b.Property<int?>("CantidadLibro")
                        .HasColumnType("integer");

                    b.Property<string>("EdicionLibro")
                        .HasColumnType("text");

                    b.Property<int>("IdColeccion")
                        .HasColumnType("integer");

                    b.Property<int>("IdEditorial")
                        .HasColumnType("integer");

                    b.Property<int>("IdGenero")
                        .HasColumnType("integer");

                    b.Property<string>("IsbnLibro")
                        .HasColumnType("text");

                    b.Property<string>("TituloLibro")
                        .HasColumnType("text");

                    b.Property<int>("id_coleccion")
                        .HasColumnType("integer");

                    b.Property<int>("id_editorial")
                        .HasColumnType("integer");

                    b.Property<int>("id_genero")
                        .HasColumnType("integer");

                    b.HasKey("IdLibro");

                    b.HasIndex("id_coleccion");

                    b.HasIndex("id_editorial");

                    b.HasIndex("id_genero");

                    b.ToTable("Libros", (string)null);
                });

            modelBuilder.Entity("Modelo.Prestamo", b =>
                {
                    b.Property<int>("IdPrestamo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPrestamo"));

                    b.Property<int>("EstadoPrestamoIdEstadoPrestamo")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FchEtregPrestamo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("FchFinPrestamo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("FchaInicPrestamo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("IdEstadoPrestamo")
                        .HasColumnType("integer");

                    b.Property<int>("Id_usuario")
                        .HasColumnType("integer");

                    b.Property<int?>("LibroIdLibro")
                        .HasColumnType("integer");

                    b.Property<int?>("idEstadoPrestamo")
                        .HasColumnType("integer");

                    b.Property<int>("idUsuario")
                        .HasColumnType("integer");

                    b.HasKey("IdPrestamo");

                    b.HasIndex("EstadoPrestamoIdEstadoPrestamo");

                    b.HasIndex("LibroIdLibro");

                    b.HasIndex("idEstadoPrestamo");

                    b.HasIndex("idUsuario");

                    b.ToTable("Prestamos", (string)null);
                });

            modelBuilder.Entity("Modelo.RelaccionAutorLibro", b =>
                {
                    b.Property<int>("IdAutor")
                        .HasColumnType("integer");

                    b.Property<int>("IdLibro")
                        .HasColumnType("integer");

                    b.HasKey("IdAutor", "IdLibro");

                    b.HasIndex("IdLibro");

                    b.ToTable("RelaccionAutoresLibros", (string)null);
                });

            modelBuilder.Entity("Modelo.RelaccionLibroPrestamo", b =>
                {
                    b.Property<int>("IdPrestamo")
                        .HasColumnType("integer");

                    b.Property<int>("IdLibro")
                        .HasColumnType("integer");

                    b.HasKey("IdPrestamo", "IdLibro");

                    b.HasIndex("IdLibro");

                    b.ToTable("RelaccionLibrosPrestamos", (string)null);
                });

            modelBuilder.Entity("Modelo.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdUsuario"));

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool?>("EstaBloqueadoUsuario")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("FchAltaUsuario")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("FchBajaUsuario")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("FchFinBloqueoUsuario")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("IdAcceso")
                        .HasColumnType("integer");

                    b.Property<string>("Napellidos")
                        .HasColumnType("text");

                    b.Property<string>("Telefono")
                        .HasColumnType("text");

                    b.Property<int>("idAcceso")
                        .HasColumnType("integer");

                    b.HasKey("IdUsuario");

                    b.HasIndex("idAcceso");

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("AutorLibro", b =>
                {
                    b.HasOne("Modelo.Autor", null)
                        .WithMany()
                        .HasForeignKey("AutoresIdAutor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelo.Libro", null)
                        .WithMany()
                        .HasForeignKey("ListaLibrosIdLibro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Modelo.Libro", b =>
                {
                    b.HasOne("Modelo.Coleccion", "Coleccion")
                        .WithMany("LibrosColeccion")
                        .HasForeignKey("id_coleccion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelo.Editorial", "Editorial")
                        .WithMany("LibrosEditorial")
                        .HasForeignKey("id_editorial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelo.Genero", "Genero")
                        .WithMany("LibrosGenero")
                        .HasForeignKey("id_genero")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coleccion");

                    b.Navigation("Editorial");

                    b.Navigation("Genero");
                });

            modelBuilder.Entity("Modelo.Prestamo", b =>
                {
                    b.HasOne("Modelo.EstadoPrestamo", "EstadoPrestamo")
                        .WithMany()
                        .HasForeignKey("EstadoPrestamoIdEstadoPrestamo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelo.Libro", null)
                        .WithMany("Prestamos")
                        .HasForeignKey("LibroIdLibro");

                    b.HasOne("Modelo.Prestamo", null)
                        .WithMany("PrestamosLibros")
                        .HasForeignKey("idEstadoPrestamo");

                    b.HasOne("Modelo.Usuario", "Usuarios")
                        .WithMany()
                        .HasForeignKey("idUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstadoPrestamo");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Modelo.RelaccionAutorLibro", b =>
                {
                    b.HasOne("Modelo.Autor", "Autor")
                        .WithMany()
                        .HasForeignKey("IdAutor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelo.Libro", "Libro")
                        .WithMany()
                        .HasForeignKey("IdLibro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("Libro");
                });

            modelBuilder.Entity("Modelo.RelaccionLibroPrestamo", b =>
                {
                    b.HasOne("Modelo.Libro", "Libro")
                        .WithMany()
                        .HasForeignKey("IdLibro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelo.Prestamo", "Prestamo")
                        .WithMany()
                        .HasForeignKey("IdPrestamo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Libro");

                    b.Navigation("Prestamo");
                });

            modelBuilder.Entity("Modelo.Usuario", b =>
                {
                    b.HasOne("Modelo.Acceso", "Acceso")
                        .WithMany("UsuariosConAcceso")
                        .HasForeignKey("idAcceso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Acceso");
                });

            modelBuilder.Entity("Modelo.Acceso", b =>
                {
                    b.Navigation("UsuariosConAcceso");
                });

            modelBuilder.Entity("Modelo.Coleccion", b =>
                {
                    b.Navigation("LibrosColeccion");
                });

            modelBuilder.Entity("Modelo.Editorial", b =>
                {
                    b.Navigation("LibrosEditorial");
                });

            modelBuilder.Entity("Modelo.Genero", b =>
                {
                    b.Navigation("LibrosGenero");
                });

            modelBuilder.Entity("Modelo.Libro", b =>
                {
                    b.Navigation("Prestamos");
                });

            modelBuilder.Entity("Modelo.Prestamo", b =>
                {
                    b.Navigation("PrestamosLibros");
                });
#pragma warning restore 612, 618
        }
    }
}
